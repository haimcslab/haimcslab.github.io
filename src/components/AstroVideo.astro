---
// import Hls from 'hls.js'
export interface Props {
	src: string;
}
const { src }  = Astro.props
---

<script>
	import Hls from 'hls.js'
	export class HLSPlayer extends HTMLVideoElement {
		hls: Hls;
		static get observedAttributes() {
			return ['src']
		}
		constructor() {
			super();
		}
		/**
		 * Is called whenever a observed attribute changes
		 *
		 * @param {string} atb the attribute that changed
		 * @param {string} current the current attribute value
		 * @param {string} newValue the new attribute value
		 * @memberof HLSPlayer
		 */
		attributeChangedCallback(atb, current, newValue) {
			if(
				!newValue || //if value is not empty
				current === newValue || //ignore if the value is the same
				-1 < newValue.indexOf('blob:http') // ignore hls.js changing the src
			) { return; }

			switch(atb) {
				case 'src':
					if (this.hls) {
						this.hls.destroy();
					}
					if(this.canPlayType('application/vnd.apple.mpegurl')) {
						this.src = newValue
					} else if (Hls.isSupported()) {
						this.hls = new Hls({enableWorker:false});
						this.hls.attachMedia(this);
						this.hls.loadSource(newValue);
					}
					this.muted = true;
					this.play()
					break;
			}
		}
	}
	customElements.define('hls-js', HLSPlayer, { extends: 'video' })
</script>
<div class="bg-vid-container">
	<video class="cover" autoplay muted is="hls-js" src={src}></video>
</div>
<style>
.bg-vid-container {
    width: 100%;
    height: 100%;
    overflow: hidden;
    display: flex;
		position: fixed;
		left:0;
		top:0;
    justify-content: center;
    align-items: center;
		z-index: -1;
}

video.cover {
    width: 100%;
    min-width: 178vh;
		filter: blur(15px);
		-o-filter: blur(15px);
		transform: scale(1.04);
    /* height: auto; */
}
/* 
	video {
		position: fixed;
		right: 0;
		bottom: 0;
		min-width: 100%;
		min-height: 100%;
		z-index: -10;
		width: 100%;
		height: 100vh;
		margin: auto;
		/* transform: translateX(calc((100% - 100vw) / 2)); */
	} */
</style>